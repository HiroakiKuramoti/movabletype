name: Content Type
author_name: Six Apart, Ltd.
author_link: http://www.sixapart.com/
pack_link: <__trans phrase="http://www.sixapart.com/movabletype/">
version: 0.17
schema_version: 0.17
l10n_class: MT::ContentType::L10N

permissions: $ContentType::ContentType::Permission::permissions

callbacks:
    init_app: $ContentType::ContentType::App::CMS::init_app

    # TODO: should add other callbacks. these are probably insufficient.
    MT::ContentType::post_save: $ContentType::MT::ContentType::post_save
    MT::ContentType::post_remove: $ContentType::MT::ContentType::post_remove
    MT::ContentField::post_save: $ContentType::MT::ContentField::post_save
    MT::ContentField::post_remove: $ContentType::MT::ContentField::post_remove

applications:
    cms:
        callbacks:
            template_param.edit_role: $ContentType::ContentType::App::CMS::tmpl_param_edit_role
            cms_post_delete.content_data: $ContentType::ContentType::App::CMS::post_delete
        methods:
            cfg_content_field: $ContentType::ContentType::App::CMS::cfg_content_field
            save_cfg_content_field: $ContentType::ContentType::App::CMS::save_cfg_content_field
            delete_content_field: $ContentType::ContentType::App::CMS::delete_content_field
            cfg_content_type_description: $ContentType::ContentType::App::CMS::cfg_content_type_description
            cfg_content_type: $ContentType::ContentType::App::CMS::cfg_content_type
            save_cfg_content_type: $ContentType::ContentType::App::CMS::save_cfg_content_type
            # cfg_content_type_data: $ContentType::ContentType::App::CMS::cfg_content_type_data
            select_list_content_type: $ContentType::ContentType::App::CMS::select_list_content_type
            select_edit_content_type: $ContentType::ContentType::App::CMS::select_edit_content_type
            edit_content_data: $ContentType::ContentType::App::CMS::edit_content_data
            save_content_data: $ContentType::ContentType::App::CMS::save_content_data

            view_category_list: $ContentType::MT::CMS::CategoryList::view
        menus:
            content_type:
                label: Content Type
                order: 9100
            content_type:manage_content_type:
                label: Manage
                order: 100
                mode: list
                args:
                    _type: content_type
                permission:  administer_website,administer_blog
                view:
                    - website
                    - blog
            content_type:create_content_type:
                label: New
                mode: cfg_content_type_description
                order: 200
                view:
                    - website
                    - blog
            content_data:
                label: Content Data
                order: 9200
            content_data:manage_content_data:
                label: Manage
                order: 100
                mode: select_list_content_type
                view:
                    - website
                    - blog
            content_data:create_content_data:
                label: New
                mode: select_edit_content_type
                order: 200
                view:
                    - website
                    - blog

            category_list:
                label: Category Lists
                order: 9500
            category_list:manage:
                label: Manage
                order: 100
                mode: list
                condition: $ContentType::MT::CMS::CategoryList::manage_condition
                args:
                    _type: category_list
                view:
                    - website
                    - blog
            category_list:create:
                label: New
                order: 200
                mode: view
                permission: edit_categories
                args:
                    _type: category_list
                view:
                    - website
                    - blog

object_types:
    content_type: MT::ContentType
    cd: MT::ContentData
    content_data: MT::ContentData
    cf: MT::ContentField
    content_field: MT::ContentField
    content_field_index: MT::ContentFieldIndex
    cf_idx: MT::ContentFieldIndex
    objectcategory: MT::ObjectCategory

    category:
        category_list_id: integer
    category_list: MT::CategoryList

listing_screens: $ContentType::ContentType::ListProperties::make_listing_screens
list_properties: $ContentType::ContentType::ListProperties::make_list_properties
content_actions: $ContentType::ContentType::ListProperties::make_content_actions
list_actions: $ContentType::ContentType::ListProperties::make_list_actions
tags:
    block:
        Contents: $ContentType::ContentType::Tags::_hdlr_contents
        ContentAssets: $ContentType::ContentType::Tags::_hdlr_assets
        ContentTags: $ContentType::ContentType::Tags::_hdlr_content_tags
        ContentCategories: $ContentType::ContentType::Tags::_hdlr_content_categories
    function:
        Content: $ContentType::ContentType::Tags::_hdlr_content
        Entity: $ContentType::ContentType::Tags::_hdlr_entity

content_field_types:
    content_type:
        label: Content Type
        data_type: integer
        order: 10
        field_html: $ContentType::MT::ContentFieldType::ContentType::field_html
        data_getter: $ContentType::MT::ContentFieldType::ContentType::data_getter
        list_props:
            content_type:
                html: $ContentType::MT::ContentFieldType::ContentType::html
            id:
                base: __virtual.integer
                col: value_integer
                display: none
                terms: $ContentType::MT::ContentFieldType::ContentType::terms_id
        options:
            - label
            - hint
            - required
            - display
            - multiple
            - can_add
            - max
            - min
            - listing_filter
        # field_html: |
        #     sub {
        #         my ( $app, $id, $value )  = @_;
        #         require MT::ContentField;
        #         require MT::ContentType;
        #         require MT::ContentData;
        #         my @values = split ',', $value;
        #         my $content_field = MT::ContentField->load($id);
        #         my $ct_id = $content_field->related_content_type_id;
        #         my $ct    = MT::ContentType->load($ct_id);
        #         my ($label_field) = grep { $_->{label} } @{ $ct->fields };
        #         my @ct_datas
        #             = MT::ContentData->load( { content_type_id => $ct_id } );
        #         my $html = '';
        #         my $num = 1;
        #         foreach my $ct_data (@ct_datas) {
        #             my $ct_data_id = $ct_data->id;
        #             my $label = $ct_data->data->{ $label_field->{id} };
        #             $html .= '<div>';
        #             $html .= "<input type=\"checkbox\" name=\"content-field-$id\" id=\"content-field-$id-$num\" value=\"$ct_data_id\"";
        #             $html .= ( grep { $_ eq $ct_data_id } @values ) ? ' checked="checked"' : '';
        #             $html .= " />";
        #             $html .= " <label for=\"content-field-$id-$num\">$label</label>";
        #             $html .= '</div>';
        #             $num++;
        #         }
        #         return $html;
        #     }
        # data_getter: |
        #     sub {
        #         my ( $app, $id )  = @_;
        #         my $q = $app->param;
        #         my @datas = $q->param( 'content-field-' . $id );
        #         return join ',', @datas;
        #     }
    single_line_text:
        label: Single Line Text
        data_type: varchar
        order: 20
        list_props:
            single_line_text:
                base: __virtual.string
                col: value_varchar
                terms: $ContentType::MT::ContentFieldType::SingleLineText::terms
                use_blank: 1
        options:
            - label
            - hint
            - required
            - display
            - min_length
            - max_length
            - initial_value
    multi_line_text:
        label: Multi Line Text
        data_type: blob
        order: 30
        list_props:
            multi_line_text:
                base: __virtual.string
                col: value_blob
                terms: $ContentType::MT::ContentFieldType::SingleLineText::terms
                use_blank: 1
        options:
            - label
            - hint
            - required
            - display
            - initial_value
            - input_format
    integer:
        label: Integer
        data_type: integer
        order: 40
        list_props:
            integer:
                base: __virtual.integer
                col: value_integer
                terms: $ContentType::MT::ContentFieldType::SingleLineText::terms
                use_blank: 1
        options:
            - label
            - hint
            - required
            - display
            - min_value
            - max_value
            - initial_value
    float:
        label: Float
        data_type: float
        order: 50
        list_props:
            float:
                base: __virtual.float
                col: value_float
                terms: $ContentType::MT::ContentFieldType::SingleLineText::terms
                use_blank: 1
        options:
            - label
            - hint
            - required
            - display
            - min_value
            - max_value
            - decimal_places
            - initial_value
    url:
        label: URL
        data_type: varchar
        order: 60
        ss_validator: $ContentType::MT::ContentFieldType::URL::ss_validator
        list_props:
            url:
                base: __virtual.string
                col: value_varchar
                terms: $ContentType::MT::ContentFieldType::SingleLineText::terms
                use_blank: 1
        options:
            - label
            - hint
            - required
            - display
            - initial_value
        # ss_validator: |
        #     sub {
        #         my ( $app, $id) = @_;
        #         my $q = $app->param;
        #         my $str = $q->param( 'content-field-' . $id );
        #         if ( MT::Util::is_url($str) ) {
        #             return $str;
        #         }
        #         else {
        #             my $err = MT->translate( "Invalid URL: '[_1]'", $str );
        #             return $app->error($err) if $err && $app;
        #         }
        #     }
    date_and_time:
        label: Date and Time
        data_type: datetime
        order: 70
        field_html: $ContentType::MT::ContentFieldType::DateTime::field_html
        data_getter: $ContentType::MT::ContentFieldType::DateTime::data_getter
        ss_validator: $ContentType::MT::ContentFieldType::DateTime::ss_validator
        list_props:
            date_and_time:
                base: __virtual.date
                col: value_datetime
                html: $ContentType::MT::ContentFieldType::DateTime::html
                terms: $ContentType::MT::ContentFieldType::DateTime::terms
                use_blank: 1
                use_future: 1
        options:
            - label
            - hint
            - required
            - display
            - initial_value
        # field_html: |
        #     sub {
        #         my ( $app, $id, $value )  = @_;
        #         require MT::Util;
        #         my $date = MT::Util::format_ts( "%Y-%m-%d", $value, $app->blog, $app->user ? $app->user->preferred_language : undef );
        #         my $time = MT::Util::format_ts( "%H:%M:%S", $value, $app->blog, $app->user ? $app->user->preferred_language : undef );
        #         my $html = '';
        #         $html .= '<span>';
        #         $html .= "<input type=\"text\" name=\"date-$id\" id=\"date-$id\" class=\"text date text-date\" value=\"$date\" placeholder=\"YYYY:MM:DD\" />";
        #         $html .= '</span> ';
        #         $html .= '<span class="separator"> <__trans phrase="@"></span> ';
        #         $html .= '<span>';
        #         $html .= "<input type=\"text\" name=\"time-$id\" id=\"time-$id\" class=\"text time\" value=\"$time\" placeholder=\"HH:MM:SS\" />";
        #         $html .= '</span> ';
        #         return $html;
        #     }
        # data_getter: |
        #     sub {
        #         my ( $app, $id )  = @_;
        #         my $q = $app->param;
        #         my $date = $q->param('date-' . $id);
        #         my $time = $q->param('time-' . $id);
        #         my $ts   = $date . $time;
        #         $ts =~ s/\D//g;
        #         return $ts;
        #     }
        # ss_validator: |
        #     sub {
        #         my ( $app, $id ) = @_;
        #         my $q = $app->param;
        #         my $date = $q->param('date-' . $id);
        #         my $time = $q->param('time-' . $id);
        #         my $ts   = $date . ' ' . $time;
        #         $ts =~ s/\D//g;
        #         require MT::Util;
        #         if ( MT::Util::is_valid_date($ts) ) {
        #             return $ts;
        #         }
        #         else {
        #             my $err = MT->translate( "Invalid date and time: '[_1] [_2]'", $date, $time );
        #             return $app->error($err) if $err && $app;
        #         }
        #     }
    date:
        label: Date
        data_type: datetime
        order: 80
        field_html: $ContentType::MT::ContentFieldType::Date::field_html
        data_getter: $ContentType::MT::ContentFieldType::Date::data_getter
        ss_validator: $ContentType::MT::ContentFieldType::Date::ss_validator
        list_props:
            date:
                base: __virtual.date
                col: value_datetime
                html: $ContentType::MT::ContentFieldType::Date::html
                terms: $ContentType::MT::ContentFieldType::DateTime::terms
                use_blank: 1
                use_future: 1
        options:
            - label
            - hint
            - required
            - display
            - initial_value
        # field_html: |
        #     sub {
        #         my ( $app, $id, $value )  = @_;
        #         require MT::Util;
        #         my $date = MT::Util::format_ts( "%Y-%m-%d", $value, $app->blog, $app->user ? $app->user->preferred_language : undef );
        #         my $html = '';
        #         $html .= '<span>';
        #         $html .= "<input type=\"text\" name=\"date-$id\" id=\"date-$id\" class=\"text date text-date\" value=\"$date\" placeholder=\"YYYY:MM:DD\" />";
        #         $html .= '</span> ';
        #         return $html;
        #     }
        # data_getter: |
        #     sub {
        #         my ( $app, $id )  = @_;
        #         my $q = $app->param;
        #         my $date = $q->param('date-' . $id);
        #         $date =~ s/\D//g;
        #         return $date;
        #     }
        # ss_validator: |
        #     sub {
        #         my ( $app, $id ) = @_;
        #         my $q = $app->param;
        #         my $date = $q->param('date-' . $id);
        #         my $ts   = $date . ' 000000';
        #         $ts =~ s/\D//g;
        #         require MT::Util;
        #         if ( MT::Util::is_valid_date($ts) ) {
        #             return $ts;
        #         }
        #         else {
        #             my $err = MT->translate( "Invalid date: '[_1]'", $date );
        #             return $app->error($err) if $err && $app;
        #         }
        #     }
    time:
        label: Time
        data_type: datetime
        order: 90
        field_html: $ContentType::MT::ContentFieldType::Time::field_html
        data_getter: $ContentType::MT::ContentFieldType::Time::data_getter
        ss_validator: $ContentType::MT::ContentFieldType::Time::ss_validator
        list_props:
            time:
                filter_tmpl: $ContentType::MT::ContentFieldType::Time::filter_tmpl
                html: $ContentType::MT::ContentFieldType::Time::html
                terms: $ContentType::MT::ContentFieldType::Time::terms
                use_blank: 1
        options:
            - label
            - hint
            - required
            - display
            - initial_value
        # field_html: |
        #     sub {
        #         my ( $app, $id, $value )  = @_;
        #         require MT::Util;
        #         $value = '19700101' . $value;
        #         my $time = MT::Util::format_ts( "%H:%M:%S", $value, $app->blog, $app->user ? $app->user->preferred_language : undef );
        #         my $html = '';
        #         $html .= '<span>';
        #         $html .= '<span>';
        #         $html .= "<input type=\"text\" name=\"time-$id\" id=\"time-$id\" class=\"text time\" value=\"$time\" placeholder=\"HH:MM:SS\" />";
        #         $html .= '</span> ';
        #         return $html;
        #     }
        # data_getter: |
        #     sub {
        #         my ( $app, $id )  = @_;
        #         my $q = $app->param;
        #         my $time = $q->param('time-' . $id);
        #         $time =~ s/\D//g;
        #         return $time;
        #     }
        # ss_validator: |
        #     sub {
        #         my ( $app, $id ) = @_;
        #         my $q = $app->param;
        #         my $time = $q->param('time-' . $id);
        #         my $ts   = '19700101 ' . $time;
        #         $ts =~ s/\D//g;
        #         require MT::Util;
        #         if ( MT::Util::is_valid_date($ts) ) {
        #             return $time;
        #         }
        #         else {
        #             my $err = MT->translate( "Invalid time: '[_1]'", $time );
        #             return $app->error($err) if $err && $app;
        #         }
        #     }
    select_box:
        label: Select Box
        data_type: varchar
        order: 100
        field_html: $ContentType::MT::ContentFieldType::SelectBox::field_html
        data_getter: $ContentType::MT::ContentFieldType::SelectBox::data_getter
        list_props:
            select_box:
                filter_tmpl: $ContentType::MT::ContentFieldType::SelectBox::filter_tmpl
                single_select_options: $ContentType::MT::ContentFieldType::SelectBox::single_select_options
                terms: $ContentType::MT::ContentFieldType::SelectBox::terms
        options:
            - label
            - hint
            - required
            - display
            - multiple
            - max
            - min
            - values
            - initial_value
        # field_html: |
        #     sub {
        #         my ( $app, $id, $value )  = @_;
        #         require MT::ContentField;
        #         my $content_field  = MT::ContentField->load($id);
        #         my $options = $content_field->options;
        #         my $options_delimiter = quotemeta( $app->registry('content_field_types')->{single_select}{options_delimiter} || ',' );
        #         my @options = split $options_delimiter, $options;
        #         my $html = '<select name="content-field-' . $id . '" id="content-field-' . $id . '" class="select">';
        #         foreach my $option (@options) {
        #             $html .= '<option value="' . $option . '"';
        #             $html .= ' selected="selected"' if $option eq $value;
        #             $html .= '>' . $option . '</option>';
        #         }
        #         $html .= '</select>';
        #         return $html;
        #     }
    radio:
        label: Radio
        data_type: varchar
        order: 110
        field_html: $ContentType::MT::ContentFieldType::Radio::field_html
        list_props:
            radio:
                filter_tmpl: $ContentType::MT::ContentFieldType::SelectBox::filter_tmpl
                single_select_options: $ContentType::MT::ContentFieldType::Radio::single_select_options
                terms: $ContentType::MT::ContentFieldType::SelectBox::terms
        options:
            - label
            - hint
            - required
            - display
            - values
            - initial_value
        # field_html: |
        #     sub {
        #         my ( $app, $id, $value )  = @_;
        #         require MT::ContentField;
        #         my $content_field = MT::ContentField->load($id);
        #         my $options = $content_field->options;
        #         my $options_delimiter = quotemeta( $app->registry('content_field_types')->{radio}{options_delimiter} || ',' );
        #         my @options = split $options_delimiter, $options;
        #         my $html = '';
        #         my $count = 1;
        #         foreach my $option (@options) {
        #             $html .= "<input type=\"radio\" name=\"content-field-$id\" id=\"content-field-$id-$count\" class=\"radio\" value=\"$option\"";
        #             $html .= ' checked="checked"' if $option eq $value;
        #             $html .= ' />';
        #             $html .= " <label for=\"content-field-$id-$count\">$option ";
        #             $count++;
        #         }
        #         return $html;
        #     }
    checkbox:
        label: Checkbox
        data_type: varchar
        order: 120
        field_html: $ContentType::MT::ContentFieldType::Checkbox::field_html
        data_getter: $ContentType::MT::ContentFieldType::Checkbox::data_getter
        list_props:
            checkbox:
                filter_tmpl: $ContentType::MT::ContentFieldType::SelectBox::filter_tmpl
                single_select_options: $ContentType::MT::ContentFieldType::Checkbox::single_select_options
                terms: $ContentType::MT::ContentFieldType::SelectBox::terms
        options:
            - label
            - hint
            - required
            - display
            - multiple
            - max
            - min
            - values
            - initial_value
        # field_html: |
        #     sub {
        #         my ( $app, $id, $value )  = @_;
        #         require MT::ContentField;
        #         my $content_field = MT::ContentField->load($id);
        #         my $options = $content_field->options;
        #         my $options_delimiter = quotemeta( $app->registry('content_field_types')->{checkbox}{options_delimiter} || ',' );
        #         my @options = split $options_delimiter, $options;
        #         my @values  = split $options_delimiter, $value;
        #         my $html = '';
        #         my $count = 1;
        #         foreach my $option (@options) {
        #             $html .= "<input type=\"checkbox\" name=\"content-field-$id\" id=\"content-field-$id-$count\" class=\"radio\" value=\"$option\"";
        #             $html .= ( grep { $_ eq $option } @values ) ? ' checked="checked"' : '';
        #             $html .= " />";
        #             $html .= " <label for=\"content-field-$id-$count\">$option ";
        #             $count++;
        #         }
        #         return $html;
        #     }
        # data_getter: |
        #     sub {
        #         my ( $app, $id )  = @_;
        #         my $q = $app->param;
        #         my @datas = $q->param( 'content-field-' . $id );
        #         return join ',', @datas;
        #     }
    asset:
        label: Asset
        data_type: integer
        order: 130
        field_html: $ContentType::MT::ContentFieldType::Asset::field_html
        data_getter: $ContentType::MT::ContentFieldType::Asset::data_getter
        list_props:
            asset:
                filter_tmpl: $ContentType::MT::ContentFieldType::SelectBox::filter_tmpl
                html: $ContentType::MT::ContentFieldType::Asset::html
                single_select_options: $ContentType::MT::ContentFieldType::Asset::single_select_options
                sub_fields:
                    - class: thumbnail
                      label: Thumbnail
                      display: default
                terms: $ContentType::MT::ContentFieldType::SelectBox::terms
            author_name:
                base: __virtual.author_name
                display: none
                terms: $ContentType::MT::ContentFieldType::Asset::terms_author_name
            author_status:
                base: author.status
                display: none
                terms: $ContentType::MT::ContentFieldType::Asset::terms_author_status
            date_created:
                base: __virtual.date
                col: created_on
                display: none
                terms: $ContentType::MT::ContentFieldType::Asset::terms_date
            date_modified:
                base: __virtual.date
                col: modified_on
                display: none
                terms: $ContentType::MT::ContentFieldType::Asset::terms_date
            description:
                base: __virtual.string
                col: description
                display: none
                terms: $ContentType::MT::ContentFieldType::Asset::terms_text
                use_blank: 1
            file_extension:
                base: __virtual.string
                col: file_ext
                display: none
                terms: $ContentType::MT::ContentFieldType::Asset::terms_text
            filename:
                base: __virtual.string
                col: file_name
                display: none
                terms: $ContentType::MT::ContentFieldType::Asset::terms_text
            id:
                base: __virtual.integer
                col: value_integer
                display: none
                terms: $ContentType::MT::ContentFieldType::Asset::terms_id
            label:
                base: __virtual.string
                col: label
                display: none
                terms: $ContentType::MT::ContentFieldType::Asset::terms_text
            missing_file:
                base: asset.missing_file
                display: none
                terms: $ContentType::MT::ContentFieldType::Asset::terms_missing_file
            pixel_height:
                base: asset.image_height
                display: none
                terms: $ContentType::MT::ContentFieldType::Asset::terms_image_size
            pixel_width:
                base: asset.image_width
                display: none
                terms: $ContentType::MT::ContentFieldType::Asset::terms_image_size
            tag:
                base: __virtual.string
                col: name
                display: none
                terms: $ContentType::MT::ContentFieldType::Asset::terms_tag
                use_blank: 1
        options:
            - label
            - hint
            - required
            - display
            - multiple
            - can_upload
            - max
            - min
            - listing_filter
        # field_html: |
        #     sub {
        #         my ( $app, $id, $value )  = @_;
        #         my $q = $app->param;
        #         my $ct_data_id = $q->param('id');
        #         my @obj_assets = MT::ObjectAsset->load(
        #             {   object_ds => 'content_data',
        #                 object_id => $ct_data_id
        #             }
        #         );
        #         my $html = '';
        #         $html .= '<input type="text" name="content-field-' . $id . '" class="text long" value="';
        #         my $count = 1;
        #         foreach my $obj_asset (@obj_assets) {
        #             $html .= $obj_asset->asset_id;
        #             $html .= ',' unless $count == @obj_assets;
        #             $count++;
        #         }
        #         $html .= '" />';
        #         return $html;
        #     }
        # data_getter: |
        #     sub {
        #         my ( $app, $id )  = @_;
        #         require MT::Asset;
        #         require MT::ObjectAsset;
        #         my $q = $app->param;
        #         my $ct_data_id = $q->param('id');
        #         my $asset_ids = $q->param( 'content-field-' . $id );
        #         my @asset_ids = split ',', $asset_ids;
        #         foreach my $asset_id (@asset_ids) {
        #             my $asset = MT::Asset->load($asset_id);
        #             next unless $asset;
        #             my $obj_asset = MT::ObjectAsset->load(
        #                 {   asset_id  => $asset_id,
        #                     object_ds => 'content_data',
        #                     object_id => $ct_data_id
        #                 }
        #             );
        #             next if $obj_asset;
        #             $obj_asset = MT::ObjectAsset->new;
        #             $obj_asset->blog_id($app->blog->id);
        #             $obj_asset->asset_id($asset_id);
        #             $obj_asset->object_ds('content_data');
        #             $obj_asset->object_id( $ct_data_id );
        #             $obj_asset->save;
        #         }
        #         return $asset_ids;
        #     }
    audio:
        label: Audio
        data_type: varchar
        order: 140
        options:
            - label
            - hint
            - required
            - display
            - multiple
            - can_upload
            - max
            - min
            - listing_filter
    video:
        label: Video
        data_type: varchar
        order: 150
        options:
            - label
            - hint
            - required
            - display
            - multiple
            - can_upload
            - max
            - min
            - listing_filter
    image:
        label: Image
        data_type: varchar
        order: 160
        options:
            - label
            - hint
            - required
            - display
            - multiple
            - can_upload
            - max
            - min
            - listing_filter
    embed_text:
        label: embed text
        data_type: blob
        order: 170
        list_props:
            embed_text:
                base: __virtual.string
                col: value_blob
                terms: $ContentType::MT::ContentFieldType::SingleLineText::terms
                use_blank: 1
        options:
            - label
            - hint
            - required
            - display
    category:
        label: Category
        data_type: integer
        order: 180
        field_html: $ContentType::MT::ContentFieldType::Category::field_html
        data_getter: $ContentType::MT::ContentFieldType::Category::data_getter
        list_props:
            category:
                base: __virtual.string
                col: label
                html: $ContentType::MT::ContentFieldType::Category::html
                terms: $ContentType::MT::ContentFieldType::Category::terms
                use_blank: 1
        options:
            - label
            - hint
            - required
            - display
            - multiple
            - can_add
            - max
            - min
            - category_list
        # field_html: |
        #     sub {
        #         my ( $app, $id, $value )  = @_;
        #         require MT::Category;
        #         require MT::ObjectCategory;
        #         my @values   = split ',', $value;
        #         my $q        = $app->param;
        #         my $ct_data_id    = $q->param('id');
        #         my @cats     = MT::Category->load( { blog_id => $app->blog->id } );
        #         my @obj_cats = MT::ObjectCategory->load(
        #             {   object_ds=> 'content_data',
        #                 object_id => $ct_data_id
        #             }
        #         );
        #         my $html = '';
        #         my $num = 1;
        #         foreach my $cat (@cats) {
        #             my $cat_id = $cat->id;
        #             my $cat_label = $cat->label;
        #             $html .= '<div>';
        #             $html .= "<input type=\"checkbox\" name=\"content-field-$id\" id=\"content-field-$id-$num\" value=\"$cat_id\"";
        #             $html .= ( grep { $_->category_id eq $cat_id } @obj_cats ) ? ' checked="checked"' : '';
        #             $html .= " />";
        #             $html .= " <label for=\"content-field-$id-$num\">$cat_label</label>";
        #             $html .= '</div>';
        #         }
        #         return $html;
        #     }
        # data_getter: |
        #     sub {
        #         my ( $app, $id )  = @_;
        #         require MT::Category;
        #         require MT::ObjectCategory;
        #         my $q = $app->param;
        #         my $ct_data_id = $q->param('id');
        #         my @cat_ids = $q->param( 'content-field-' . $id );
        #         my @obj_cats = MT::ObjectCategory->load(
        #             {   object_ds => 'content_data',
        #                 object_id         => $ct_data_id
        #             }
        #         );
        #         foreach my $obj_cat (@obj_cats) {
        #             $obj_cat->remove
        #                 unless ( grep { $_ eq $obj_cat->category_id } @cat_ids );
        #         }
        #         foreach my $cat_id (@cat_ids) {
        #             my $obj_cat = MT::ObjectCategory->load(
        #                 {   category_id       => $cat_id,
        #                     object_ds => 'content_data',
        #                     object_id         => $ct_data_id
        #                 }
        #             );
        #             next if $obj_cat;
        #             $obj_cat = MT::ObjectCategory->new;
        #             $obj_cat->blog_id($app->blog->id);
        #             $obj_cat->category_id($cat_id);
        #             $obj_cat->object_ds('content_data');
        #             $obj_cat->object_id($ct_data_id);
        #             $obj_cat->save;
        #         }
        #         return join ',', @cat_ids;
        #     }
    tag:
        label: Tag
        data_type: integer
        order: 190
        field_html: $ContentType::MT::ContentFieldType::Tag::field_html
        data_getter: $ContentType::MT::ContentFieldType::Tag::data_getter
        list_props:
            tag:
                base: __virtual.string
                col: name
                html: $ContentType::MT::ContentFieldType::Tag::html
                terms: $ContentType::MT::ContentFieldType::Tag::terms
                use_blank: 1
        options:
            - label
            - hint
            - required
            - display
            - multiple
            - can_add
            - max
            - min
            - initial_value
        # field_html: |
        #     sub {
        #         my ( $app, $id, $value )  = @_;
        #         require MT::Tag;
        #         require MT::ObjectTag;
        #         my $q = $app->param;
        #         my $ct_data_id = $q->param('id');
        #         my @obj_tags = MT::ObjectTag->load(
        #             {   object_ds=> 'content_data',
        #                 object_id => $ct_data_id
        #             }
        #         );
        #         my $html = '';
        #         $html .= '<input type="text" name="content-field-' . $id . '" class="text long" value="';
        #         my $count = 1;
        #         foreach my $obj_tag (@obj_tags) {
        #             my $tag = MT::Tag->load($obj_tag->tag_id);
        #             $html .= $tag->name;
        #             $html .= ',' unless $count == @obj_tags;
        #             $count++;
        #         }
        #         $html .= '" />';
        #         return $html;
        #     }
        # data_getter: |
        #     sub {
        #         my ( $app, $id )  = @_;
        #         require MT::Tag;
        #         require MT::ObjectTag;
        #         my $q = $app->param;
        #         my $ct_data_id = $q->param('id');
        #         my $tag_names = $q->param( 'content-field-' . $id );
        #         my @tag_names = split ',', $tag_names;
        #         my @tags = MT::Tag->load( { name => \@tag_names },
        #             { binary => { name => 1 } } );
        #         my @obj_tags = MT::ObjectTag->load(
        #             {   object_datasource => 'content_data',
        #                 object_id         => $ct_data_id
        #             }
        #         );
        #         foreach my $obj_tag (@obj_tags) {
        #             $obj_tag->remove
        #                 unless ( grep { $_->id eq $obj_tag->id } @tags );
        #         }
        #         foreach my $tag_name (@tag_names) {
        #             my ($tag) = grep { $_->name eq $tag_name } @tags;
        #             unless ($tag) {
        #                 $tag = MT::Tag->new;
        #                 $tag->name($tag_name);
        #                 $tag->save or next;
        #             }
        #             my $obj_tag = MT::ObjectTag->load(
        #                 {   tag_id    => $tag->id,
        #                     object_datasource => 'content_data',
        #                     object_id => $ct_data_id
        #                 }
        #             );
        #             next if $obj_tag;
        #             $obj_tag = MT::ObjectTag->new;
        #             $obj_tag->blog_id($app->blog->id);
        #             $obj_tag->tag_id($tag->id);
        #             $obj_tag->object_datasource('content_data');
        #             $obj_tag->object_id( $ct_data_id );
        #             $obj_tag->save;
        #         }
        #         return $tag_names;
        #     }
    list:
        label: list
        data_type: blob
        order: 200
        options:
            - label
            - hint
            - required
            - display
            - bullet_or_numbered
    table:
        label: Table
        data_type: blob
        order: 210 
        options:
            - label
            - hint
            - required
            - display

