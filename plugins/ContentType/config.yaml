name: Content Type
author_name: Six Apart, Ltd.
author_link: http://www.sixapart.com/
pack_link: <__trans phrase="http://www.sixapart.com/movabletype/">
version: 0.11
schema_version: 0.11
l10n_class: MT::ContentType::L10N

permissions: $ContentType::ContentType::Permission::permissions

callbacks:
    init_app: $ContentType::ContentType::App::CMS::init_app

    # TODO: should add other callbacks. these are probably insufficient.
    MT::ContentType::post_save: $ContentType::MT::ContentType::post_save
    MT::ContentType::post_remove: $ContentType::MT::ContentType::post_remove
    MT::ContentField::post_save: $ContentType::MT::ContentField::post_save
    MT::ContentField::post_remove: $ContentType::MT::ContentField::post_remove

applications:
    cms:
        callbacks:
            template_param.edit_role: $ContentType::ContentType::App::CMS::tmpl_param_edit_role
        methods:
            cfg_entity: $ContentType::ContentType::App::CMS::cfg_entity
            save_cfg_entity: $ContentType::ContentType::App::CMS::save_cfg_entity
            delete_entity: $ContentType::ContentType::App::CMS::delete_entity
            cfg_content_type: $ContentType::ContentType::App::CMS::cfg_content_type
            save_cfg_content_type: $ContentType::ContentType::App::CMS::save_cfg_content_type
            # cfg_content_type_data: $ContentType::ContentType::App::CMS::cfg_content_type_data
            select_list_content_type: $ContentType::ContentType::App::CMS::select_list_content_type
            select_edit_content_type: $ContentType::ContentType::App::CMS::select_edit_content_type
            edit_content_data: $ContentType::ContentType::App::CMS::edit_content_data
            save_content_data: $ContentType::ContentType::App::CMS::save_content_data
        menus:
            content_type:
                label: Content Type
                order: 9100
            content_type:manage_content_type:
                label: Manage
                order: 100
                mode: list
                args:
                    _type: content_type
                permission:  administer_website,administer_blog
                view:
                    - website
                    - blog
            content_type:create_content_type:
                label: New
                mode: cfg_content_type
                order: 200
                view:
                    - website
                    - blog
            content_data:
                label: Content Data
                order: 9200
            content_data:manage_content_data:
                label: Manage
                order: 100
                mode: select_list_content_type
                view:
                    - website
                    - blog
            content_data:create_content_data:
                label: New
                mode: select_edit_content_type
                order: 200
                view:
                    - website
                    - blog
object_types:
    content_type: MT::ContentType
    cd: MT::ContentData
    content_data: MT::ContentData
    cf: MT::ContentField
    content_field: MT::ContentField
    content_field_index: MT::ContentFieldIndex
    cf_idx: MT::ContentFieldIndex
    objectcategory: MT::ObjectCategory

listing_screens: $ContentType::ContentType::ListProperties::make_listing_screens
list_properties: $ContentType::ContentType::ListProperties::make_list_properties
content_actions: $ContentType::ContentType::ListProperties::make_content_actions
list_actions: $ContentType::ContentType::ListProperties::make_list_actions
tags:
    block:
        Contents: $ContentType::ContentType::Tags::_hdlr_contents
        ContentAssets: $ContentType::ContentType::Tags::_hdlr_assets
        ContentTags: $ContentType::ContentType::Tags::_hdlr_content_tags
        ContentCategories: $ContentType::ContentType::Tags::_hdlr_content_categories
    function:
        Content: $ContentType::ContentType::Tags::_hdlr_content
        Entity: $ContentType::ContentType::Tags::_hdlr_entity

content_field_types:
    content_type:
        label: Content Type
        data_type: varcahr
        order: 10
        field_html: |
            sub {
                my ( $app, $id, $value )  = @_;
                require MT::ContentField;
                require MT::ContentType;
                require MT::ContentData;
                my @values = split ',', $value;
                my $content_field = MT::ContentField->load($id);
                my $ct_id = $content_field->related_content_type_id;
                my $ct    = MT::ContentType->load($ct_id);
                my ($label_field) = grep { $_->{label} } @{ $ct->fields };
                my @ct_datas
                    = MT::ContentData->load( { content_type_id => $ct_id } );
                my $html = '';
                my $num = 1;
                foreach my $ct_data (@ct_datas) {
                    my $ct_data_id = $ct_data->id;
                    my $label = $ct_data->data->{ $label_field->{id} };
                    $html .= '<div>';
                    $html .= "<input type=\"checkbox\" name=\"entity-$id\" id=\"entity-$id-$num\" value=\"$ct_data_id\"";
                    $html .= ( grep { $_ eq $ct_data_id } @values ) ? ' checked="checked"' : '';
                    $html .= " />";
                    $html .= " <label for=\"entity-$id-$num\">$label</label>";
                    $html .= '</div>';
                    $num++;
                }
                return $html;
            }
        data_getter: |
            sub {
                my ( $app, $id )  = @_;
                my $q = $app->param;
                my @datas = $q->param( 'entity-' . $id );
                return join ',', @datas;
            }
    single_line_text:
        label: Single Line Text
        data_type: varchar
        order: 20
    multi_line_text:
        label: Multi Line Text
        data_type: blob
        order: 30
    integer:
        label: Integer
        data_type: integer
        order: 40
    float:
        label: Float
        data_type: float
        order: 50
    url:
        label: URL
        data_type: varchar
        order: 60
        ss_validator: |
            sub {
                my ( $app, $id) = @_;
                my $q = $app->param;
                my $str = $q->param( 'entity-' . $id );
                if ( MT::Util::is_url($str) ) {
                    return $str;
                }
                else {
                    my $err = MT->translate( "Invalid URL: '[_1]'", $str );
                    return $app->error($err) if $err && $app;
                }
            }
    date_and_time:
        label: Date and Time
        data_type: datetime
        order: 70
        field_html: |
            sub {
                my ( $app, $id, $value )  = @_;
                require MT::Util;
                my $date = MT::Util::format_ts( "%Y-%m-%d", $value, $app->blog, $app->user ? $app->user->preferred_language : undef );
                my $time = MT::Util::format_ts( "%H:%M:%S", $value, $app->blog, $app->user ? $app->user->preferred_language : undef );
                my $html = '';
                $html .= '<span>';
                $html .= "<input type=\"text\" name=\"date-$id\" id=\"date-$id\" class=\"text date text-date\" value=\"$date\" placeholder=\"YYYY:MM:DD\" />";
                $html .= '</span> ';
                $html .= '<span class="separator"> <__trans phrase="@"></span> ';
                $html .= '<span>';
                $html .= "<input type=\"text\" name=\"time-$id\" id=\"time-$id\" class=\"text time\" value=\"$time\" placeholder=\"HH:MM:SS\" />";
                $html .= '</span> ';
                return $html;
            }
        data_getter: |
            sub {
                my ( $app, $id )  = @_;
                my $q = $app->param;
                my $date = $q->param('date-' . $id);
                my $time = $q->param('time-' . $id);
                my $ts   = $date . $time;
                $ts =~ s/\D//g;
                return $ts;
            }
        ss_validator: |
            sub {
                my ( $app, $id ) = @_;
                my $q = $app->param;
                my $date = $q->param('date-' . $id);
                my $time = $q->param('time-' . $id);
                my $ts   = $date . ' ' . $time;
                $ts =~ s/\D//g;
                require MT::Util;
                if ( MT::Util::is_valid_date($ts) ) {
                    return $ts;
                }
                else {
                    my $err = MT->translate( "Invalid date and time: '[_1] [_2]'", $date, $time );
                    return $app->error($err) if $err && $app;
                }
            }
    date:
        label: Date
        data_type: varchar
        order: 80
        field_html: |
            sub {
                my ( $app, $id, $value )  = @_;
                require MT::Util;
                my $date = MT::Util::format_ts( "%Y-%m-%d", $value, $app->blog, $app->user ? $app->user->preferred_language : undef );
                my $html = '';
                $html .= '<span>';
                $html .= "<input type=\"text\" name=\"date-$id\" id=\"date-$id\" class=\"text date text-date\" value=\"$date\" placeholder=\"YYYY:MM:DD\" />";
                $html .= '</span> ';
                return $html;
            }
        data_getter: |
            sub {
                my ( $app, $id )  = @_;
                my $q = $app->param;
                my $date = $q->param('date-' . $id);
                $date =~ s/\D//g;
                return $date;
            }
        ss_validator: |
            sub {
                my ( $app, $id ) = @_;
                my $q = $app->param;
                my $date = $q->param('date-' . $id);
                my $ts   = $date . ' 000000';
                $ts =~ s/\D//g;
                require MT::Util;
                if ( MT::Util::is_valid_date($ts) ) {
                    return $ts;
                }
                else {
                    my $err = MT->translate( "Invalid date: '[_1]'", $date );
                    return $app->error($err) if $err && $app;
                }
            }
    time:
        label: Time
        data_type: varchar
        order: 90
        field_html: |
            sub {
                my ( $app, $id, $value )  = @_;
                require MT::Util;
                $value = '19700101' . $value;
                my $time = MT::Util::format_ts( "%H:%M:%S", $value, $app->blog, $app->user ? $app->user->preferred_language : undef );
                my $html = '';
                $html .= '<span>';
                $html .= '<span>';
                $html .= "<input type=\"text\" name=\"time-$id\" id=\"time-$id\" class=\"text time\" value=\"$time\" placeholder=\"HH:MM:SS\" />";
                $html .= '</span> ';
                return $html;
            }
        data_getter: |
            sub {
                my ( $app, $id )  = @_;
                my $q = $app->param;
                my $time = $q->param('time-' . $id);
                $time =~ s/\D//g;
                return $time;
            }
        ss_validator: |
            sub {
                my ( $app, $id ) = @_;
                my $q = $app->param;
                my $time = $q->param('time-' . $id);
                my $ts   = '19700101 ' . $time;
                $ts =~ s/\D//g;
                require MT::Util;
                if ( MT::Util::is_valid_date($ts) ) {
                    return $time;
                }
                else {
                    my $err = MT->translate( "Invalid time: '[_1]'", $time );
                    return $app->error($err) if $err && $app;
                }
            }
    single_select:
        label: Single Select
        data_type: varchar
        options: 1
        order: 100
        field_html: |
            sub {
                my ( $app, $id, $value )  = @_;
                require MT::ContentField;
                my $content_field  = MT::ContentField->load($id);
                my $options = $content_field->options;
                my $options_delimiter = quotemeta( $app->registry('content_field_types')->{single_select}{options_delimiter} || ',' );
                my @options = split $options_delimiter, $options;
                my $html = '<select name="entity-' . $id . '" id="entity-' . $id . '" class="select">';
                foreach my $option (@options) {
                    $html .= '<option value="' . $option . '"';
                    $html .= ' selected="selected"' if $option eq $value;
                    $html .= '>' . $option . '</option>';
                }
                $html .= '</select>';
                return $html;
            }
    radio:
        label: Radio
        data_type: varchar
        options: 1
        order: 110
        field_html: |
            sub {
                my ( $app, $id, $value )  = @_;
                require MT::ContentField;
                my $content_field = MT::ContentField->load($id);
                my $options = $content_field->options;
                my $options_delimiter = quotemeta( $app->registry('content_field_types')->{radio}{options_delimiter} || ',' );
                my @options = split $options_delimiter, $options;
                my $html = '';
                my $count = 1;
                foreach my $option (@options) {
                    $html .= "<input type=\"radio\" name=\"entity-$id\" id=\"entity-$id-$count\" class=\"radio\" value=\"$option\"";
                    $html .= ' checked="checked"' if $option eq $value;
                    $html .= ' />';
                    $html .= " <label for=\"entity-$id-$count\">$option ";
                    $count++;
                }
                return $html;
            }
    checkbox:
        label: Checkbox
        data_type: varchar
        options: 1
        order: 120
        field_html: |
            sub {
                my ( $app, $id, $value )  = @_;
                require MT::ContentField;
                my $content_field = MT::ContentField->load($id);
                my $options = $content_field->options;
                my $options_delimiter = quotemeta( $app->registry('content_field_types')->{checkbox}{options_delimiter} || ',' );
                my @options = split $options_delimiter, $options;
                my @values  = split $options_delimiter, $value;
                my $html = '';
                my $count = 1;
                foreach my $option (@options) {
                    $html .= "<input type=\"checkbox\" name=\"entity-$id\" id=\"entity-$id-$count\" class=\"radio\" value=\"$option\"";
                    $html .= ( grep { $_ eq $option } @values ) ? ' checked="checked"' : '';
                    $html .= " />";
                    $html .= " <label for=\"entity-$id-$count\">$option ";
                    $count++;
                }
                return $html;
            }
        data_getter: |
            sub {
                my ( $app, $id )  = @_;
                my $q = $app->param;
                my @datas = $q->param( 'entity-' . $id );
                return join ',', @datas;
            }
    asset:
        label: Asset
        data_type: varchar
        order: 130
        field_html: |
            sub {
                my ( $app, $id, $value )  = @_;
                my $q = $app->param;
                my $ct_data_id = $q->param('id');
                my @obj_assets = MT::ObjectAsset->load(
                    {   object_ds => 'content_data',
                        object_id => $ct_data_id
                    }
                );
                my $html = '';
                $html .= '<input type="text" name="entity-' . $id . '" class="text long" value="';
                my $count = 1;
                foreach my $obj_asset (@obj_assets) {
                    $html .= $obj_asset->asset_id;
                    $html .= ',' unless $count == @obj_assets;
                    $count++;
                }
                $html .= '" />';
                return $html;
            }
        data_getter: |
            sub {
                my ( $app, $id )  = @_;
                require MT::Asset;
                require MT::ObjectAsset;
                my $q = $app->param;
                my $ct_data_id = $q->param('id');
                my $asset_ids = $q->param( 'entity-' . $id );
                my @asset_ids = split ',', $asset_ids;
                foreach my $asset_id (@asset_ids) {
                    my $asset = MT::Asset->load($asset_id);
                    next unless $asset;
                    my $obj_asset = MT::ObjectAsset->load(
                        {   asset_id  => $asset_id,
                            object_ds => 'content_data',
                            object_id => $ct_data_id
                        }
                    );
                    next if $obj_asset;
                    $obj_asset = MT::ObjectAsset->new;
                    $obj_asset->blog_id($app->blog->id);
                    $obj_asset->asset_id($asset_id);
                    $obj_asset->object_ds('content_data');
                    $obj_asset->object_id( $ct_data_id );
                    $obj_asset->save;
                }
                return $asset_ids;
            }
    embed_text:
        label: Embed Text
        data_type: blob
        order: 140
    category:
        label: Category
        data_type: varchar
        order: 150
        field_html: |
            sub {
                my ( $app, $id, $value )  = @_;
                require MT::Category;
                require MT::ObjectCategory;
                my @values   = split ',', $value;
                my $q        = $app->param;
                my $ct_data_id    = $q->param('id');
                my @cats     = MT::Category->load( { blog_id => $app->blog->id } );
                my @obj_cats = MT::ObjectCategory->load(
                    {   object_ds=> 'content_data',
                        object_id => $ct_data_id
                    }
                );
                my $html = '';
                my $num = 1;
                foreach my $cat (@cats) {
                    my $cat_id = $cat->id;
                    my $cat_label = $cat->label;
                    $html .= '<div>';
                    $html .= "<input type=\"checkbox\" name=\"entity-$id\" id=\"entity-$id-$num\" value=\"$cat_id\"";
                    $html .= ( grep { $_->category_id eq $cat_id } @obj_cats ) ? ' checked="checked"' : '';
                    $html .= " />";
                    $html .= " <label for=\"entity-$id-$num\">$cat_label</label>";
                    $html .= '</div>';
                }
                return $html;
            }
        data_getter: |
            sub {
                my ( $app, $id )  = @_;
                require MT::Category;
                require MT::ObjectCategory;
                my $q = $app->param;
                my $ct_data_id = $q->param('id');
                my @cat_ids = $q->param( 'entity-' . $id );
                my @obj_cats = MT::ObjectCategory->load(
                    {   object_ds => 'content_data',
                        object_id         => $ct_data_id
                    }
                );
                foreach my $obj_cat (@obj_cats) {
                    $obj_cat->remove
                        unless ( grep { $_ eq $obj_cat->category_id } @cat_ids );
                }
                foreach my $cat_id (@cat_ids) {
                    my $obj_cat = MT::ObjectCategory->load(
                        {   category_id       => $cat_id,
                            object_ds => 'content_data',
                            object_id         => $ct_data_id
                        }
                    );
                    next if $obj_cat;
                    $obj_cat = MT::ObjectCategory->new;
                    $obj_cat->blog_id($app->blog->id);
                    $obj_cat->category_id($cat_id);
                    $obj_cat->object_ds('content_data');
                    $obj_cat->object_id($ct_data_id);
                    $obj_cat->save;
                }
                return join ',', @cat_ids;
            }
    tag:
        label: Tag
        data_type: tag
        order: 160
        field_html: |
            sub {
                my ( $app, $id, $value )  = @_;
                require MT::Tag;
                require MT::ObjectTag;
                my $q = $app->param;
                my $ct_data_id = $q->param('id');
                my @obj_tags = MT::ObjectTag->load(
                    {   object_ds=> 'content_data',
                        object_id => $ct_data_id
                    }
                );
                my $html = '';
                $html .= '<input type="text" name="entity-' . $id . '" class="text long" value="';
                my $count = 1;
                foreach my $obj_tag (@obj_tags) {
                    my $tag = MT::Tag->load($obj_tag->tag_id);
                    $html .= $tag->name;
                    $html .= ',' unless $count == @obj_tags;
                    $count++;
                }
                $html .= '" />';
                return $html;
            }
        data_getter: |
            sub {
                my ( $app, $id )  = @_;
                require MT::Tag;
                require MT::ObjectTag;
                my $q = $app->param;
                my $ct_data_id = $q->param('id');
                my $tag_names = $q->param( 'entity-' . $id );
                my @tag_names = split ',', $tag_names;
                my @tags = MT::Tag->load( { name => \@tag_names },
                    { binary => { name => 1 } } );
                my @obj_tags = MT::ObjectTag->load(
                    {   object_datasource => 'content_data',
                        object_id         => $ct_data_id
                    }
                );
                foreach my $obj_tag (@obj_tags) {
                    $obj_tag->remove
                        unless ( grep { $_->id eq $obj_tag->id } @tags );
                }
                foreach my $tag_name (@tag_names) {
                    my ($tag) = grep { $_->name eq $tag_name } @tags;
                    unless ($tag) {
                        $tag = MT::Tag->new;
                        $tag->name($tag_name);
                        $tag->save or next;
                    }
                    my $obj_tag = MT::ObjectTag->load(
                        {   tag_id    => $tag->id,
                            object_datasource => 'content_data',
                            object_id => $ct_data_id
                        }
                    );
                    next if $obj_tag;
                    $obj_tag = MT::ObjectTag->new;
                    $obj_tag->blog_id($app->blog->id);
                    $obj_tag->tag_id($tag->id);
                    $obj_tag->object_datasource('content_data');
                    $obj_tag->object_id( $ct_data_id );
                    $obj_tag->save;
                }
                return $tag_names;
            }
