#!/usr/bin/perl -w

# Movable Type (r) (C) 2001-2016 Six Apart, Ltd. All Rights Reserved.
# This code cannot be redistributed without permission from www.sixapart.com.
# For more information, consult your Movable Type license.
#
# $Id$

use strict;

use FindBin;
use lib ("$FindBin::Bin/../../../lib", "$FindBin::Bin/../../../extlib", "$FindBin::Bin/../lib");
use MT::Bootstrap;
use MT;
use MT::Util;
use MT::ContentData;
use MT::Entry;
use MT::EntityIdx;
use MT::EntityVarcharIdx;
use MT::EntityTextIdx;
use MT::EntityDatetimeIdx;
use MT::EntityIntegerIdx;
use MT::EntityFloatIdx;

my $verbose;
my $dry_run;

require Getopt::Long;
Getopt::Long::GetOptions(
    "dry_run" => \$dry_run,
    "verbose" => \$verbose,
);

$@ = undef;

my $mt = MT->new() or die MT->errstr;


my $iter = MT::Entry->load_iter();
while ( my $obj = $iter->() ) {
    # Content Type Data
    my $title = $obj->title;
    my $text = $obj->text . ( $obj->text_more ? "\n" . $obj->text_more : '' );
    my $datetime = $obj->authored_on;
    my $id = $obj->id;
    my $float = rand();
    my $content_data = MT::ContentData->new;
    my $hash = {
        1 => $title,
        2 => $text,
        3 => $datetime,
        4 => $id,
        5 => $float,
    };
    $content_data->content_type_id(1);
    $content_data->data(MT::Util::to_json($hash));
    $content_data->save;

    # Varchar
    my $entity_varchar_idx = MT::EntityVarcharIdx->new;
    $entity_varchar_idx->content_type_id(1);
    $entity_varchar_idx->entity_id(1);
    $entity_varchar_idx->content_type_data_id($content_data->id);
    $entity_varchar_idx->value($title);

    my $entity_idx_varchar = MT::EntityIdx->new;
    $entity_idx_varchar->content_type_id(1);
    $entity_idx_varchar->entity_id(1);
    $entity_idx_varchar->content_type_data_id($content_data->id);
    $entity_idx_varchar->value_varchar($title);

    # Text
    my $entity_text_idx = MT::EntityTextIdx->new;
    $entity_text_idx->content_type_id(1);
    $entity_text_idx->entity_id(2);
    $entity_text_idx->content_type_data_id($content_data->id);
    $entity_text_idx->value($text);

    my $entity_idx_text = MT::EntityIdx->new;
    $entity_idx_text->content_type_id(1);
    $entity_idx_text->entity_id(2);
    $entity_idx_text->content_type_data_id($content_data->id);
    $entity_idx_text->value_text($text);

    # Datetime
    my $entity_datetime_idx = MT::EntityDatetimeIdx->new;
    $entity_datetime_idx->content_type_id(1);
    $entity_datetime_idx->entity_id(3);
    $entity_datetime_idx->content_type_data_id($content_data->id);
    $entity_datetime_idx->value($datetime);

    my $entity_idx_datetime = MT::EntityIdx->new;
    $entity_idx_datetime->content_type_id(1);
    $entity_idx_datetime->entity_id(3);
    $entity_idx_datetime->content_type_data_id($content_data->id);
    $entity_idx_datetime->value_datetime($datetime);

    # Integer
    my $entity_integer_idx = MT::EntityIntegerIdx->new;
    $entity_integer_idx->content_type_id(1);
    $entity_integer_idx->entity_id(4);
    $entity_integer_idx->content_type_data_id($content_data->id);
    $entity_integer_idx->value($id);

    my $entity_idx_integer = MT::EntityIdx->new;
    $entity_idx_integer->content_type_id(1);
    $entity_idx_integer->entity_id(4);
    $entity_idx_integer->content_type_data_id($content_data->id);
    $entity_idx_integer->value_integer($id);

    # Float
    my $entity_float_idx = MT::EntityFloatIdx->new;
    $entity_float_idx->content_type_id(1);
    $entity_float_idx->entity_id(5);
    $entity_float_idx->content_type_data_id($content_data->id);
    $entity_float_idx->value($float);

    my $entity_idx_float = MT::EntityIdx->new;
    $entity_idx_float->content_type_id(1);
    $entity_idx_float->entity_id(5);
    $entity_idx_float->content_type_data_id($content_data->id);
    $entity_idx_float->value_float($float);

    $entity_idx_varchar->save;
    $entity_idx_text->save;
    $entity_idx_datetime->save;
    $entity_idx_integer->save;
    $entity_idx_float->save;
    $entity_varchar_idx->save;
    $entity_text_idx->save;
    $entity_datetime_idx->save;
    $entity_integer_idx->save;
    $entity_float_idx->save;
}

1;
